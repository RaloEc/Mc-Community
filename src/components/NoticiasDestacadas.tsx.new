'use client';

import { useEffect, useState } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { CalendarIcon, ArrowRightIcon } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Noticia } from '@/types';

interface NoticiasDestacadasProps {
  limit?: number;
}

export default function NoticiasDestacadas({ limit = 5 }: NoticiasDestacadasProps) {
  const [noticias, setNoticias] = useState<Noticia[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchNoticiasDestacadas = async () => {
      try {
        setLoading(true);
        
        // Usar URL absoluta para evitar problemas con Next.js
        let baseUrl;
        if (typeof window !== 'undefined') {
          baseUrl = window.location.origin;
        } else {
          baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 
                  (process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : 
                  'http://localhost:3000');
        }
        
        const response = await fetch(`${baseUrl}/api/noticias?ordenFecha=desc&limit=${limit}`);
        
        if (!response.ok) {
          throw new Error(`Error al obtener noticias: ${response.status}`);
        }
        
        const data = await response.json();
        
        if (data.success && data.data) {
          setNoticias(data.data);
        } else {
          throw new Error(data.error || 'Error desconocido al obtener noticias');
        }
      } catch (err) {
        console.error('Error al cargar noticias destacadas:', err);
        setError(err instanceof Error ? err.message : 'Error desconocido');
      } finally {
        setLoading(false);
      }
    };

    fetchNoticiasDestacadas();
  }, []);

  if (loading) {
    return (
      <div className="w-full bg-card rounded-lg border border-border/50 shadow-sm p-6">
        <div className="animate-pulse space-y-6">
          <div className="h-8 bg-muted rounded w-1/3"></div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="md:col-span-2">
              <div className="h-[400px] bg-muted rounded-xl"></div>
            </div>
            <div className="md:col-span-1 space-y-6">
              {[...Array(3)].map((_, i) => (
                <div key={i} className="h-32 bg-muted rounded-lg"></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="w-full p-6 bg-destructive/10 rounded-lg border border-destructive/30">
        <h2 className="text-xl font-bold mb-2">Error al cargar noticias destacadas</h2>
        <p className="text-destructive">{error}</p>
      </div>
    );
  }

  if (noticias.length === 0) {
    return (
      <div className="w-full p-6 bg-card rounded-lg border border-border/50 shadow-sm">
        <p className="text-muted-foreground text-center">No hay noticias destacadas disponibles.</p>
      </div>
    );
  }

  // Si no hay noticias, no mostramos nada
  if (noticias.length === 0) {
    return null;
  }

  // Separamos las dos primeras noticias como principales y el resto como secundarias
  const [noticiaPrincipal1, noticiaPrincipal2, ...noticiasSecundarias] = noticias;

  return (
    <div className="w-full">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 w-full mb-6">
        {/* Primera noticia principal */}
        <div className="w-full">
          <div className="bg-card rounded-xl overflow-hidden shadow-sm border border-border/50 w-full h-full group hover:shadow-md transition-all duration-300">
            <div className="relative h-[350px] w-full">
              <Image 
                src={noticiaPrincipal1.imagen_portada || noticiaPrincipal1.imagen_url || '/placeholder.jpg'} 
                alt={noticiaPrincipal1.titulo}
                fill
                className="object-cover group-hover:scale-105 transition-transform duration-500"
                sizes="(max-width: 768px) 100vw, 50vw"
                priority
              />
              <div className="absolute top-0 left-0 p-3">
                <div className="flex flex-wrap gap-2">
                  {noticiaPrincipal1.categorias ? (
                    noticiaPrincipal1.categorias.map(cat => (
                      <Badge key={cat.id} variant="secondary" className="bg-primary/90 text-white shadow-md backdrop-blur-sm">
                        {cat.nombre}
                      </Badge>
                    ))
                  ) : noticiaPrincipal1.categoria ? (
                    <Badge variant="secondary" className="bg-primary/90 text-white shadow-md backdrop-blur-sm">
                      {noticiaPrincipal1.categoria.nombre}
                    </Badge>
                  ) : null}
                </div>
              </div>
              <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent hover:from-black/80 hover:via-black/40 transition-all duration-300 flex flex-col justify-end p-6 backdrop-blur-[1px]">
                <div className="mt-auto backdrop-blur-[2px] bg-black/20 p-3 rounded-lg">
                  <h2 className="text-xl md:text-2xl font-bold text-white mb-2 drop-shadow-lg">
                    {noticiaPrincipal1.titulo}
                  </h2>
                  <p className="text-white/90 line-clamp-2 mb-3 text-sm max-w-[90%] drop-shadow-lg">
                    {noticiaPrincipal1.resumen || noticiaPrincipal1.contenido.substring(0, 100) + '...'}
                  </p>
                  <div className="flex justify-between items-center text-sm text-white/90">
                    <div className="flex items-center gap-2">
                      <CalendarIcon className="h-4 w-4" />
                      <span className="text-xs">
                        {new Date(noticiaPrincipal1.fecha_publicacion || Date.now()).toLocaleDateString('es-ES', {
                          day: '2-digit',
                          month: 'short',
                          year: 'numeric'
                        })}
                      </span>
                    </div>
                    <Button 
                      variant="secondary"
                      size="sm"
                      className="bg-white/20 hover:bg-white/40 text-white shadow-md transition-all"
                    >
                      <Link href={`/noticias/${noticiaPrincipal1.id}`}>
                        Leer más
                        <ArrowRightIcon className="ml-1 h-4 w-4" />
                      </Link>
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Segunda noticia principal */}
        <div className="w-full">
          <div className="bg-card rounded-xl overflow-hidden shadow-sm border border-border/50 w-full h-full group hover:shadow-md transition-all duration-300">
            <div className="relative h-[350px] w-full">
              <Image 
                src={noticiaPrincipal2.imagen_portada || noticiaPrincipal2.imagen_url || '/placeholder.jpg'} 
                alt={noticiaPrincipal2.titulo}
                fill
                className="object-cover group-hover:scale-105 transition-transform duration-500"
                sizes="(max-width: 768px) 100vw, 50vw"
              />
              <div className="absolute top-0 left-0 p-3">
                <div className="flex flex-wrap gap-2">
                  {noticiaPrincipal2.categorias ? (
                    noticiaPrincipal2.categorias.map(cat => (
                      <Badge key={cat.id} variant="secondary" className="bg-primary/90 text-white shadow-md backdrop-blur-sm">
                        {cat.nombre}
                      </Badge>
                    ))
                  ) : noticiaPrincipal2.categoria ? (
                    <Badge variant="secondary" className="bg-primary/90 text-white shadow-md backdrop-blur-sm">
                      {noticiaPrincipal2.categoria.nombre}
                    </Badge>
                  ) : null}
                </div>
              </div>
              <div className="absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent hover:from-black/80 hover:via-black/40 transition-all duration-300 flex flex-col justify-end p-6 backdrop-blur-[1px]">
                <div className="mt-auto backdrop-blur-[2px] bg-black/20 p-3 rounded-lg">
                  <h2 className="text-xl md:text-2xl font-bold text-white mb-2 drop-shadow-lg">
                    {noticiaPrincipal2.titulo}
                  </h2>
                  <p className="text-white/90 line-clamp-2 mb-3 text-sm max-w-[90%] drop-shadow-lg">
                    {noticiaPrincipal2.resumen || noticiaPrincipal2.contenido.substring(0, 100) + '...'}
                  </p>
                  <div className="flex justify-between items-center text-sm text-white/90">
                    <div className="flex items-center gap-2">
                      <CalendarIcon className="h-4 w-4" />
                      <span className="text-xs">
                        {new Date(noticiaPrincipal2.fecha_publicacion || Date.now()).toLocaleDateString('es-ES', {
                          day: '2-digit',
                          month: 'short',
                          year: 'numeric'
                        })}
                      </span>
                    </div>
                    <Button 
                      variant="secondary"
                      size="sm"
                      className="bg-white/20 hover:bg-white/40 text-white shadow-md transition-all"
                    >
                      <Link href={`/noticias/${noticiaPrincipal2.id}`}>
                        Leer más
                        <ArrowRightIcon className="ml-1 h-4 w-4" />
                      </Link>
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      {/* Noticias secundarias */}
      {noticiasSecundarias.length > 0 && (
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-6">
          {noticiasSecundarias.slice(0, 3).map(noticia => (
            <div key={noticia.id} className="bg-background rounded-lg overflow-hidden shadow-sm hover:shadow transition-shadow border border-border/50 hover:bg-accent/10 group">
              <div className="relative h-32">
                <Image 
                  src={noticia.imagen_portada || noticia.imagen_url || '/placeholder.jpg'} 
                  alt={noticia.titulo}
                  fill
                  className="object-cover group-hover:scale-105 transition-transform duration-500"
                />
                <div className="absolute top-2 left-2">
                  {noticia.categorias && noticia.categorias[0] ? (
                    <Badge className="bg-primary/80 text-white text-xs shadow-sm backdrop-blur-sm">
                      {noticia.categorias[0].nombre}
                    </Badge>
                  ) : noticia.categoria ? (
                    <Badge className="bg-primary/80 text-white text-xs shadow-sm backdrop-blur-sm">
                      {noticia.categoria.nombre}
                    </Badge>
                  ) : (
                    <Badge className="bg-primary/80 text-white text-xs shadow-sm backdrop-blur-sm">
                      General
                    </Badge>
                  )}
                </div>
              </div>
              <div className="p-3">
                <h3 className="font-semibold line-clamp-2 mb-2">
                  <Link href={`/noticias/${noticia.id}`} className="hover:text-primary transition-colors">
                    {noticia.titulo}
                  </Link>
                </h3>
                <div className="flex justify-between items-center text-xs text-muted-foreground">
                  <span>
                    {new Date(noticia.fecha_publicacion || Date.now()).toLocaleDateString('es-ES', {
                      day: '2-digit',
                      month: 'short'
                    })}
                  </span>
                  <span style={{ color: noticia.autor?.color || 'inherit' }}>
                    {noticia.autor?.username || noticia.autor_nombre || (typeof noticia.autor === 'string' ? noticia.autor : 'Anónimo')}
                  </span>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}
