'use client'

import { useState, useEffect, useRef } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { ModeToggle } from '@/components/mode-toggle'
import { createClient } from '@/lib/supabase/client'
import { useAuth } from '@/context/AuthContext'
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { getUserInitials } from '@/lib/utils/avatar-utils';
import { saveCurrentUrlForRedirect } from '@/lib/utils/auth-utils';
import { AuthModal } from '@/components/auth/AuthModal'
import { Menu, Newspaper, Package, User, LogOut, Shield, MessageSquare, Plus, PenSquare, ChevronDown, Search, X } from 'lucide-react'

export default function Header() {
  const router = useRouter()
  const { session, user: authUser, profile, signOut } = useAuth()
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [isUserMenuOpen, setIsUserMenuOpen] = useState(false)
  const [isAdmin, setIsAdmin] = useState(false)
  const [currentTheme, setCurrentTheme] = useState('light');
  const [isAdminMenuOpen, setIsAdminMenuOpen] = useState(false)
  const adminMenuRef = useRef<HTMLLIElement | null>(null)
  const userMenuRef = useRef<HTMLDivElement | null>(null)
  const userButtonRef = useRef<HTMLButtonElement | null>(null)
  // Foro menu state
  const [isForoMenuOpen, setIsForoMenuOpen] = useState(false)
  const foroMenuRef = useRef<HTMLLIElement | null>(null)
  // Noticias menu state
  const [isNoticiasMenuOpen, setIsNoticiasMenuOpen] = useState(false)
  const noticiasMenuRef = useRef<HTMLLIElement | null>(null)
  // Estado para categorías expandidas
  const [expandedCategories, setExpandedCategories] = useState<Record<string, boolean>>({})
  // Auth modal state
  const [isAuthModalOpen, setIsAuthModalOpen] = useState(false)
  const [authModalMode, setAuthModalMode] = useState<'login' | 'register'>('login')
  const [authRedirectTo, setAuthRedirectTo] = useState<string | undefined>(undefined)
  const [searchQuery, setSearchQuery] = useState('')
  type ForoCategoria = {
    id: string
    nombre: string
    slug: string
    parent_id: string | null
    nivel: number | null
    color: string | null
    subcategorias?: ForoCategoria[]
  }
  type ApiForoCategoria = {
    id: string
    nombre: string
    slug: string
    parent_id: string | null
    nivel: number | null
    color: string | null
  }
  const [foroCategorias, setForoCategorias] = useState<ForoCategoria[]>([])
  const [foroMobileOpen, setForoMobileOpen] = useState(false)
  const [noticiasMobileOpen, setNoticiasMobileOpen] = useState(false)

  useEffect(() => {
    const detectTheme = () => {
      const htmlElement = document.documentElement;
      if (htmlElement.classList.contains('dark')) {
        setCurrentTheme('dark'); // AMOLED mode (mantenemos 'dark' como valor para compatibilidad)
      } else {
        setCurrentTheme('light');
      }
    };

    detectTheme();
    const observer = new MutationObserver(detectTheme);
    observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });

    return () => observer.disconnect();
  }, [])

  useEffect(() => {
    if (authUser && session && profile) {
      setIsAdmin(profile.role === 'admin');
    } else {
      setIsAdmin(false);
    }
  }, [authUser, session, profile])

  useEffect(() => {
    const checkIfClickedOutside = (e: MouseEvent) => {
      if (isAdminMenuOpen && adminMenuRef.current && !adminMenuRef.current.contains(e.target as Node)) {
        setIsAdminMenuOpen(false)
      }
      
      // Cerrar el menú de usuario al hacer clic fuera de él
      if (isUserMenuOpen && userMenuRef.current && userButtonRef.current && 
          !userMenuRef.current.contains(e.target as Node) && 
          !userButtonRef.current.contains(e.target as Node)) {
        setIsUserMenuOpen(false)
      }
    }

    document.addEventListener('mousedown', checkIfClickedOutside)
    return () => {
      document.removeEventListener('mousedown', checkIfClickedOutside)
    }
  }, [isAdminMenuOpen, isUserMenuOpen])

  // Efecto para manejar el scroll y el blur del contenido principal
  useEffect(() => {
    const mainContent = document.querySelector('main');
    const appContent = document.getElementById('__next');
    
    if (isMenuOpen) {
      document.body.style.overflow = 'hidden';
      document.body.classList.add('menu-open');
      if (mainContent) mainContent.classList.add('menu-open-blur');
      if (appContent) appContent.classList.add('menu-open-blur');
    } else {
      document.body.style.overflow = '';
      document.body.classList.remove('menu-open');
      if (mainContent) mainContent.classList.remove('menu-open-blur');
      if (appContent) appContent.classList.remove('menu-open-blur');
    }
    
    return () => {
      document.body.style.overflow = '';
      document.body.classList.remove('menu-open');
      if (mainContent) mainContent.classList.remove('menu-open-blur');
      if (appContent) appContent.classList.remove('menu-open-blur');
    };
  }, [isMenuOpen])

  // Cargar categorías de foro y construir jerarquía
  useEffect(() => {
    const fetchCategorias = async () => {
      try {
        const res = await fetch('/api/foro/categorias')
        if (!res.ok) return
        const json = await res.json()
        const flat: ForoCategoria[] = ((json?.data || []) as ApiForoCategoria[]).map((c) => ({
          id: c.id,
          nombre: c.nombre,
          slug: c.slug,
          parent_id: c.parent_id ?? null,
          nivel: c.nivel ?? 0,
          color: c.color ?? null,
        }))
        const map = new Map<string, ForoCategoria>()
        flat.forEach(c => map.set(c.id, { ...c, subcategorias: [] }))
        const roots: ForoCategoria[] = []
        flat.forEach(c => {
          if (c.parent_id && map.has(c.parent_id)) {
            map.get(c.parent_id)!.subcategorias!.push(map.get(c.id)!)
          } else {
            roots.push(map.get(c.id)!)
          }
        })
        setForoCategorias(roots)
      } catch (e) {
        // noop
      }
    }
    fetchCategorias()
  }, [])

  const handleLogout = async () => {
    console.log('[Header] handleLogout: inicio')
    try {
      await signOut()
      console.log('[Header] handleLogout: signOut() del contexto OK')
    } catch (e) {
      console.warn('[Header] handleLogout: error en signOut() del contexto, intento fallback directo', e)
      try {
        const sb = createClient()
        await sb.auth.signOut()
        console.log('[Header] handleLogout: fallback signOut OK')
      } catch (e2) {
        console.error('[Header] handleLogout: fallback signOut falló', e2)
      }
    }
    try {
      if (typeof window !== 'undefined') {
        localStorage.removeItem('auth_session_cache')
        localStorage.removeItem('auth_user_cache')
      }
    } catch {}
    setIsUserMenuOpen(false)
    setIsMenuOpen(false)
    try { router.push('/login') } catch {}
    try { router.refresh() } catch {}
  }

  const closeAllMenus = () => {
    setIsMenuOpen(false);
    setIsUserMenuOpen(false);
    setIsAdminMenuOpen(false);
  }

  const openAuthModal = (mode: 'login' | 'register', redirectTo?: string) => {
    // Guardar la URL actual para redirección después del login
    saveCurrentUrlForRedirect()
    
    setAuthModalMode(mode)
    setAuthRedirectTo(redirectTo)
    setIsAuthModalOpen(true)
    closeAllMenus()
  }

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      const trimmedQuery = searchQuery.trim();
      // Usar router.push con la URL formateada correctamente
      router.push(`/buscar?q=${encodeURIComponent(trimmedQuery)}`);
      // Limpiar el campo de búsqueda después de enviar
      setSearchQuery('');
      // Cerrar el menú móvil si está abierto
      if (isMenuOpen) {
        setIsMenuOpen(false);
      }
    }
  };

  return (
    <header className="bg-white/95 dark:bg-black/95 backdrop-blur-md fixed top-0 left-0 right-0 z-50 border-b border-gray-200/50 dark:border-gray-800/50 text-gray-900 dark:text-white shadow-sm w-full">
      <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div className="flex h-16 items-center justify-between gap-2 md:gap-4">
          {/* Logo */}
          <div className="flex items-center flex-shrink-0">
            <Link className="flex items-center gap-3" href="/" onClick={closeAllMenus}>
              <img src="/images/logo.png" alt="MC Community Logo" className="h-8 w-8" />
              <span className="hidden xs:block font-bold text-lg bg-gradient-to-r from-blue-600 to-blue-800 dark:from-blue-400 dark:to-blue-600 bg-clip-text text-transparent">
                MC Community
              </span>
            </Link>
          </div>

const openAuthModal = (mode: 'login' | 'register', redirectTo?: string) => {
  // Guardar la URL actual para redirección después del login
  saveCurrentUrlForRedirect()
  
  setAuthModalMode(mode)
  setAuthRedirectTo(redirectTo)
  setIsAuthModalOpen(true)
  closeAllMenus()
}

const handleSearch = (e: React.FormEvent) => {
  e.preventDefault();
  if (searchQuery.trim()) {
    const trimmedQuery = searchQuery.trim();
    // Usar router.push con la URL formateada correctamente
    router.push(`/buscar?q=${encodeURIComponent(trimmedQuery)}`);
    // Limpiar el campo de búsqueda después de enviar
    setSearchQuery('');
    // Cerrar el menú móvil si está abierto
    if (isMenuOpen) {
      setIsMenuOpen(false);
    }
  }
};

return (
  <header className="bg-white/95 dark:bg-black/95 backdrop-blur-md fixed top-0 left-0 right-0 z-50 border-b border-gray-200/50 dark:border-gray-800/50 text-gray-900 dark:text-white shadow-sm w-full">
    <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
      <div className="flex h-16 items-center justify-between gap-2 md:gap-4">
        {/* Logo */}
        <div className="flex items-center flex-shrink-0">
          <Link className="flex items-center gap-3" href="/" onClick={closeAllMenus}>
            <img src="/images/logo.png" alt="MC Community Logo" className="h-8 w-8" />
            <span className="hidden xs:block font-bold text-lg bg-gradient-to-r from-blue-600 to-blue-800 dark:from-blue-400 dark:to-blue-600 bg-clip-text text-transparent">
              MC Community
            </span>
          </Link>
        </div>

        {/* Navegación principal - Solo Desktop */}
        <nav aria-label="Global" className="hidden lg:block">
          <ul className="flex items-center gap-1 text-sm">
              <li className="menu-item">
                <Link 
                  href="/noticias" 
                  className="px-4 py-2 rounded-lg transition-colors font-medium"
                  style={{
                    '--tw-text-opacity': 1,
                    '--tw-bg-opacity': 0.05,
                    '--hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(37, 99, 235, 0.1)',
                    '--hover-text': profile?.color || '#2563eb',
                    '--dark-hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(96, 165, 250, 0.1)',
                    '--dark-hover-text': profile?.color || '#60a5fa',
                    '--tw-ring-color': profile?.color || '#2563eb',
                    '--dark-ring-color': profile?.color || '#60a5fa'
                  } as React.CSSProperties}
                  onClick={closeAllMenus}
                >
                  <span className="hover:bg-[var(--hover-bg)] dark:hover:bg-[var(--dark-hover-bg)] hover:text-[var(--hover-text)] dark:hover:text-[var(--dark-hover-text)] px-2 py-1 rounded">
                    Noticias
                  </span>
                </Link>
              </li>
              <li className="menu-item">
                <Link 
                  href="/foro" 
                  className="px-4 py-2 rounded-lg transition-colors font-medium"
                  style={{
                    '--tw-text-opacity': 1,
                    '--tw-bg-opacity': 0.05,
                    '--hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(37, 99, 235, 0.1)',
                    '--hover-text': profile?.color || '#2563eb',
                    '--dark-hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(96, 165, 250, 0.1)',
                    '--dark-hover-text': profile?.color || '#60a5fa',
                    '--tw-ring-color': profile?.color || '#2563eb',
                    '--dark-ring-color': profile?.color || '#60a5fa'
                  } as React.CSSProperties}
                  onClick={closeAllMenus}
                >
                  <span className="hover:bg-[var(--hover-bg)] dark:hover:bg-[var(--dark-hover-bg)] hover:text-[var(--hover-text)] dark:hover:text-[var(--dark-hover-text)] px-2 py-1 rounded">
                    Foro
                  </span>
                </Link>
              </li>
              {isAdmin && (
                <li className="relative" ref={adminMenuRef}>
                  <button
                    type="button"
                    aria-haspopup="menu"
                    aria-expanded={isAdminMenuOpen}
                    className="px-4 py-2 transition font-medium"
                    style={{
                      '--hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(37, 99, 235, 0.1)',
                      '--hover-text': profile?.color || '#2563eb',
                      '--dark-hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(96, 165, 250, 0.1)',
                      '--dark-hover-text': profile?.color || '#60a5fa',
                    } as React.CSSProperties}
                    onClick={() => setIsAdminMenuOpen((v) => !v)}
                  >
                    <span className="hover:bg-[var(--hover-bg)] dark:hover:bg-[var(--dark-hover-bg)] hover:text-[var(--hover-text)] dark:hover:text-[var(--dark-hover-text)] px-2 py-1 rounded">
                      Admin
                    </span>
                  </button>
                  <div
                    className={`absolute top-full left-0 mt-1 w-56 rounded-md border shadow-lg ${currentTheme === 'light' ? 'bg-white border-gray-200' : 'bg-black border-gray-800'} transition-all duration-200 ease-in-out transform origin-top-left ${isAdminMenuOpen ? 'scale-100 opacity-100' : 'scale-95 opacity-0 pointer-events-none'}`}
                  >
                    <ul className="py-2 text-sm">
                      <li className="menu-item">
                        <Link
                          href="/admin/dashboard"
                          className="block px-4 py-2 transition-colors"
                          style={{
                            '--hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(37, 99, 235, 0.1)',
                            '--hover-text': profile?.color || '#2563eb',
                            '--dark-hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(96, 165, 250, 0.1)',
                            '--dark-hover-text': profile?.color || '#60a5fa',
                          } as React.CSSProperties}
                          className={`block px-4 py-2 transition-colors ${
                            currentTheme === 'light' 
                              ? 'text-gray-700 hover:bg-[var(--hover-bg)] hover:text-[var(--hover-text)]' 
                              : 'text-gray-200 hover:bg-[var(--dark-hover-bg)] hover:text-[var(--dark-hover-text)]'
                          }`}
                          onClick={() => setIsAdminMenuOpen(false)}
                        >
                          Dashboard
                        </Link>
                      </li>
                      <li className="menu-item">
                        <Link
                          href="/admin/noticias"
                          className="block px-4 py-2 transition-colors"
                          style={{
                            '--hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(37, 99, 235, 0.1)',
                            '--hover-text': profile?.color || '#2563eb',
                            '--dark-hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(96, 165, 250, 0.1)',
                            '--dark-hover-text': profile?.color || '#60a5fa',
                          } as React.CSSProperties}
                          className={`block px-4 py-2 transition-colors ${
                            currentTheme === 'light' 
                              ? 'text-gray-700 hover:bg-[var(--hover-bg)] hover:text-[var(--hover-text)]' 
                              : 'text-gray-200 hover:bg-[var(--dark-hover-bg)] hover:text-[var(--dark-hover-text)]'
                          }`}
                          onClick={() => setIsAdminMenuOpen(false)}
                        >
                          Admin Noticias
                        </Link>
                      </li>
                      <li className="menu-item">
                        <Link
                          href="/admin/usuarios"
                          className="block px-4 py-2 transition-colors"
                          style={{
                            '--hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(37, 99, 235, 0.1)',
                            '--hover-text': profile?.color || '#2563eb',
                            '--dark-hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(96, 165, 250, 0.1)',
                            '--dark-hover-text': profile?.color || '#60a5fa',
                          } as React.CSSProperties}
                          className={`block px-4 py-2 transition-colors ${
                            currentTheme === 'light' 
                              ? 'text-gray-700 hover:bg-[var(--hover-bg)] hover:text-[var(--hover-text)]' 
                              : 'text-gray-200 hover:bg-[var(--dark-hover-bg)] hover:text-[var(--dark-hover-text)]'
                          }`}
                          onClick={() => setIsAdminMenuOpen(false)}
                        >
                          Admin Usuarios
                        </Link>
                      </li>
                      <li className="menu-item">
                        <Link
                          href="/admin/foro"
                          className="block px-4 py-2 transition-colors"
                          style={{
                            '--hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(37, 99, 235, 0.1)',
                            '--hover-text': profile?.color || '#2563eb',
                            '--dark-hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(96, 165, 250, 0.1)',
                            '--dark-hover-text': profile?.color || '#60a5fa',
                          } as React.CSSProperties}
                          className={`block px-4 py-2 transition-colors ${
                            currentTheme === 'light' 
                              ? 'text-gray-700 hover:bg-[var(--hover-bg)] hover:text-[var(--hover-text)]' 
                              : 'text-gray-200 hover:bg-[var(--dark-hover-bg)] hover:text-[var(--dark-hover-text)]'
                          }`}
                          onClick={() => setIsAdminMenuOpen(false)}
                        >
                          Admin Foros
                        </Link>
                      </li>
                    </ul>
                  </div>
                </li>
              )}
            </ul>
          </nav>
                      type="button"
                      aria-haspopup="menu"
                      aria-expanded={isAdminMenuOpen}
                      className={`px-4 py-2 transition hover:text-primary ${currentTheme === 'light' ? 'text-gray-900' : 'text-white'}`}
                      onClick={() => setIsAdminMenuOpen((v) => !v)}
                    >
                      Admin
                    </button>
                    <div
                      className={`absolute top-full left-0 mt-1 w-56 rounded-md border shadow-lg ${currentTheme === 'light' ? 'bg-white border-gray-200' : 'bg-black border-gray-800'} transition-all duration-200 ease-in-out transform origin-top-left ${isAdminMenuOpen ? 'scale-100 opacity-100' : 'scale-95 opacity-0 pointer-events-none'}`}
                    >
                      <ul className="py-2 text-sm">
                        <li className="menu-item">
                          <Link
                            href="/admin/dashboard"
                            className="block px-4 py-2 transition-colors"
                          style={{
                            '--hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(37, 99, 235, 0.1)',
                            '--hover-text': profile?.color || '#2563eb',
                            '--dark-hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(96, 165, 250, 0.1)',
                            '--dark-hover-text': profile?.color || '#60a5fa',
                          } as React.CSSProperties}
                          className={`block px-4 py-2 transition-colors ${
                            currentTheme === 'light' 
                              ? 'text-gray-700 hover:bg-[var(--hover-bg)] hover:text-[var(--hover-text)]' 
                              : 'text-gray-200 hover:bg-[var(--dark-hover-bg)] hover:text-[var(--dark-hover-text)]'
                          }`}
                            onClick={() => setIsAdminMenuOpen(false)}
                          >
                            Dashboard
                          </Link>
                        </li>
                        <li className="menu-item">
                          <Link
                            href="/admin/noticias"
                            className="block px-4 py-2 transition-colors"
                          style={{
                            '--hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(37, 99, 235, 0.1)',
                            '--hover-text': profile?.color || '#2563eb',
                            '--dark-hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(96, 165, 250, 0.1)',
                            '--dark-hover-text': profile?.color || '#60a5fa',
                          } as React.CSSProperties}
                          className={`block px-4 py-2 transition-colors ${
                            currentTheme === 'light' 
                              ? 'text-gray-700 hover:bg-[var(--hover-bg)] hover:text-[var(--hover-text)]' 
                              : 'text-gray-200 hover:bg-[var(--dark-hover-bg)] hover:text-[var(--dark-hover-text)]'
                          }`}
                            onClick={() => setIsAdminMenuOpen(false)}
                          >
                            Admin Noticias
                          </Link>
                        </li>
                        <li className="menu-item">
                          <Link
                            href="/admin/usuarios"
                            className="block px-4 py-2 transition-colors"
                          style={{
                            '--hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(37, 99, 235, 0.1)',
                            '--hover-text': profile?.color || '#2563eb',
                            '--dark-hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(96, 165, 250, 0.1)',
                            '--dark-hover-text': profile?.color || '#60a5fa',
                          } as React.CSSProperties}
                          className={`block px-4 py-2 transition-colors ${
                            currentTheme === 'light' 
                              ? 'text-gray-700 hover:bg-[var(--hover-bg)] hover:text-[var(--hover-text)]' 
                              : 'text-gray-200 hover:bg-[var(--dark-hover-bg)] hover:text-[var(--dark-hover-text)]'
                          }`}
                            onClick={() => setIsAdminMenuOpen(false)}
                          >
                            Admin Usuarios
                          </Link>
                        </li>
                        <li className="menu-item">
                          <Link
                            href="/admin/foro"
                            className="block px-4 py-2 transition-colors"
                          style={{
                            '--hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(37, 99, 235, 0.1)',
                            '--hover-text': profile?.color || '#2563eb',
                            '--dark-hover-bg': profile?.color ? `${profile.color}1a` : 'rgba(96, 165, 250, 0.1)',
                            '--dark-hover-text': profile?.color || '#60a5fa',
                          } as React.CSSProperties}
                          className={`block px-4 py-2 transition-colors ${
                            currentTheme === 'light' 
                              ? 'text-gray-700 hover:bg-[var(--hover-bg)] hover:text-[var(--hover-text)]' 
                              : 'text-gray-200 hover:bg-[var(--dark-hover-bg)] hover:text-[var(--dark-hover-text)]'
                          }`}
                            onClick={() => setIsAdminMenuOpen(false)}
                          >
                            Admin Foros
                          </Link>
                        </li>
                      </ul>
                    </div>
                  </li>
                )}
              </ul>
            </nav>

          {/* Barra de búsqueda centrada - solo desktop */}
          <div className="flex-1 max-w-md mx-4 hidden md:block">
            <form onSubmit={handleSearch} className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <Input
                type="search"
                placeholder="Buscar noticias, hilos..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 pr-4 py-2 w-full bg-gray-50 dark:bg-gray-900/50 border-gray-200 dark:border-gray-700 focus:border-blue-500 dark:focus:border-blue-400 rounded-full"
              />
            </form>
          </div>

          {/* Controles de usuario */}
          <div className="flex items-center gap-1 md:gap-3">
            <ModeToggle />
            
            {/* Botones de creación */}
            <div className="hidden lg:flex items-center gap-2">
              {isAdmin && (
                <Link href="/admin/noticias/crear">
                  <Button size="sm" variant="outline" className="text-xs flex items-center gap-1">
                    <PenSquare className="h-3.5 w-3.5" />
                    <span className="hidden xl:inline">Crear Noticia</span>
                  </Button>
                </Link>
              )}
              <Link href={authUser ? "/foro/crear" : "/login?redirect=/foro/crear"}>
                <Button size="sm" variant="outline" className="text-xs flex items-center gap-1">
                  <MessageSquare className="h-3.5 w-3.5" />
                  <span className="hidden xl:inline">Crear Hilo</span>
                </Button>
              </Link>
            </div>

            <div className="hidden md:flex items-center gap-4">
                
              {authUser ? (
                <div className="relative">
                  <button 
                    ref={userButtonRef}
                    type="button" 
                    className="flex items-center gap-2 p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors" 
                    onClick={() => setIsUserMenuOpen(!isUserMenuOpen)}
                  >
                    <Avatar className="w-8 h-8">
                      <AvatarImage 
                        src={profile?.avatar_url || authUser?.user_metadata?.avatar_url || authUser?.user_metadata?.picture || undefined} 
                        alt={profile?.username || authUser?.user_metadata?.full_name || authUser?.user_metadata?.name || 'Usuario'} 
                      />
                      <AvatarFallback className="text-xs">{getUserInitials(profile?.username || authUser?.user_metadata?.full_name || '', 1, 'U')}</AvatarFallback>
                    </Avatar>
                    <ChevronDown className="h-4 w-4 text-gray-500" />
                  </button>
                  <div
                    ref={userMenuRef}
                    className={`fixed md:absolute right-4 md:right-0 top-16 md:top-auto md:mt-2 z-20 w-64 rounded-xl border shadow-lg bg-white/95 dark:bg-black border-gray-200/50 dark:border-gray-800/50 transition-all duration-200 ease-in-out transform origin-top-right ${isUserMenuOpen ? 'scale-100 opacity-100' : 'scale-95 opacity-0 pointer-events-none'}`}
                  >
                        <div className="p-3">
                          <div className="flex items-center px-3 py-3 border-b border-gray-200/50 dark:border-gray-800/50 mb-2">
                            <Avatar className="w-10 h-10 mr-3">
                              <AvatarImage 
                                src={profile?.avatar_url || authUser?.user_metadata?.avatar_url || authUser?.user_metadata?.picture || undefined} 
                                alt={profile?.username || authUser?.user_metadata?.full_name || authUser?.user_metadata?.name || 'Usuario'} 
                              />
                              <AvatarFallback>{getUserInitials(profile?.username || authUser?.user_metadata?.full_name || '', 1, 'U')}</AvatarFallback>
                            </Avatar>
                            <div className="flex-1">
                              <p className="font-medium text-gray-900 dark:text-white text-sm">
                                {profile?.username || authUser?.user_metadata?.full_name || authUser?.user_metadata?.name || authUser?.email?.split('@')[0] || 'Usuario'}
                              </p>
                              <p className="text-xs text-gray-500 dark:text-gray-400">{authUser.email}</p>
                            </div>
                          </div>
                          <div className="space-y-1">
                            <Link 
                              href="/perfil" 
                              className="flex w-full items-center gap-2 rounded-lg px-3 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors" 
                              onClick={() => setIsUserMenuOpen(false)}
                            >
                              <User className="h-4 w-4" />Mi Perfil
                            </Link>
                            {isAdmin && (
                              <Link 
                                href="/admin/dashboard" 
                                className="flex w-full items-center gap-2 rounded-lg px-3 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors" 
                                onClick={() => setIsUserMenuOpen(false)}
                              >
                                <Shield className="h-4 w-4" />Panel Admin
                              </Link>
                            )}
                            <button 
                              onClick={handleLogout} 
                              className="flex w-full items-center gap-2 rounded-lg px-3 py-2 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-950/20 transition-colors"
                            >
                              <LogOut className="h-4 w-4" />Cerrar sesión
                            </button>
                          </div>
                        </div>
                      </div>
                </div>
              ) : (
                <div className="flex items-center gap-2">
                  <Button variant="ghost" size="sm" onClick={() => openAuthModal('login')}>Iniciar Sesión</Button>
                  <Button size="sm" className="bg-blue-600 hover:bg-blue-700 text-white" onClick={() => openAuthModal('register')}>Registrarse</Button>
                </div>
              )}
            </div>

            {/* Botón de menú móvil */}
            <div className="block md:hidden">
              <Button 
                variant="ghost" 
                size="icon" 
                onClick={() => setIsMenuOpen(!isMenuOpen)}
                aria-label={isMenuOpen ? 'Cerrar menú' : 'Abrir menú'}
                className="ml-1 focus:ring-2 focus:ring-blue-500"
                aria-expanded={isMenuOpen}
              >
                {isMenuOpen ? <X className="h-5 w-5" /> : <Menu className="h-5 w-5" />}
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Overlay semitransparente - comienza debajo del header */}
      <div 
        className={`md:hidden fixed left-0 right-0 z-[998] transition-all duration-300 ${isMenuOpen ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}
        onClick={() => setIsMenuOpen(false)}
        style={{
          position: 'fixed',
          top: '64px', /* Altura del header */
          left: '0',
          right: '0',
          bottom: '0',
          backgroundColor: 'rgba(0, 0, 0, 0.4)',
          zIndex: 998
        }} 
      />
      
      {/* Menú desplegable con animación desde el botón */}
      <div 
        className="md:hidden fixed top-16 right-4 z-[999]"
        style={{
          transformOrigin: 'top right',
          transform: isMenuOpen ? 'scale(1)' : 'scale(0.1)',
          opacity: isMenuOpen ? 1 : 0,
          transition: 'all 0.25s cubic-bezier(0.4, 0, 0.2, 1.1)',
          transitionProperty: 'transform, opacity',
          pointerEvents: isMenuOpen ? 'auto' : 'none',
        }}
      >
        <style jsx global>{`
          @keyframes scaleIn {
            from {
              opacity: 0;
              transform: scale(0.8) translateY(8px);
            }
            to {
              opacity: 1;
              transform: scale(1) translateY(0);
            }
          }
          .menu-item {
            animation: scaleIn 0.2s cubic-bezier(0.4, 0, 0.2, 1.1) forwards;
            opacity: 0;
            transform-origin: top center;
          }
          .menu-item:nth-child(1) { animation-delay: 50ms; }
          .menu-item:nth-child(2) { animation-delay: 80ms; }
          .menu-item:nth-child(3) { animation-delay: 110ms; }
          .menu-item:nth-child(4) { animation-delay: 140ms; }
          .menu-item:nth-child(5) { animation-delay: 170ms; }
          .menu-item:nth-child(6) { animation-delay: 200ms; }
          .menu-item:nth-child(7) { animation-delay: 230ms; }
          .menu-item:nth-child(8) { animation-delay: 260ms; }
          .menu-item:nth-child(9) { animation-delay: 290ms; }
          .menu-item:nth-child(10) { animation-delay: 320ms; }
        `}</style>
        <div 
          className={`w-72 rounded-lg shadow-2xl overflow-hidden ${currentTheme === 'light' ? 'bg-white text-gray-900' : 'bg-gray-900 text-white'}`}
          style={{
            scrollbarWidth: 'thin',
            scrollbarColor: currentTheme === 'light' ? '#9ca3af #e5e7eb' : '#4b5563 #1f2937',
            maxHeight: 'calc(100vh - 6rem)',
            boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)'
          }}
        >
          <div className="border-t border-gray-200 dark:border-gray-800">
            {authUser ? (
              <div className="menu-item flex items-center gap-3">
                <Avatar className="w-16 h-16">
                  <AvatarImage 
                    src={profile?.avatar_url || authUser?.user_metadata?.avatar_url || authUser?.user_metadata?.picture || undefined} 
                    alt={profile?.username || authUser?.user_metadata?.full_name || authUser?.user_metadata?.name || 'Usuario'} 
                  />
                  <AvatarFallback>{getUserInitials(profile?.username || authUser?.user_metadata?.full_name || '', 1, 'U')}</AvatarFallback>
                </Avatar>
                <div className="flex flex-col min-w-0">
                  <div className="flex items-center gap-2">
                    <span className="font-medium text-base truncate menu-item">
                      {profile?.username || authUser?.user_metadata?.full_name || authUser?.user_metadata?.name || authUser?.email?.split('@')[0] || 'Usuario'}
                    </span>
                    <span className={`shrink-0 inline-flex items-center rounded-full px-2 py-0.5 text-[10px] font-medium ${currentTheme === 'light' ? 'bg-blue-50 text-blue-700 border border-blue-200' : 'bg-blue-950/40 text-blue-300 border border-blue-900/60'}`}>
                      {profile?.role || 'user'}
                    </span>
                  </div>
                  {authUser.email && (
                    <span className="text-xs text-muted-foreground truncate">{authUser.email}</span>
                  )}
                </div>
              </div>
            ) : (
              <div className="flex flex-col gap-3 px-3">
                <Button 
                  variant="outline" 
                  className="w-full mx-0" 
                  onClick={() => openAuthModal('login')}
                >
                  Iniciar Sesión
                </Button>
                <Button 
                  className="w-full mx-0" 
                  onClick={() => openAuthModal('register')}
                >
                  Registrarse
                </Button>
              </div>
            )}
          </div>

          {/* Barra de búsqueda móvil */}
          <div className={`menu-item p-4 border-b border-gray-200 dark:border-gray-800 dark:bg-black`}>
            <form onSubmit={handleSearch} className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <Input
                type="search"
                placeholder="Buscar noticias, hilos..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 pr-4 py-2 w-full bg-gray-50 dark:bg-gray-900/50 border-gray-200 dark:border-gray-700 focus:border-blue-500 dark:focus:border-blue-400 rounded-full"
              />
            </form>
          </div>

          <ul className="flex-grow p-4 space-y-3 overflow-y-auto">
            {/* Aplicar clase menu-item a cada elemento de la lista */}
            <li className="menu-item">
              <button
                type="button"
                className={`w-full flex items-center justify-between gap-2 p-2 rounded-md ${currentTheme === 'light' ? 'text-gray-700 hover:bg-gray-100' : 'text-gray-200 hover:bg-gray-800'}`}
                aria-expanded={noticiasMobileOpen}
                onClick={() => setNoticiasMobileOpen(v => !v)}
              >
                <span className="flex items-center gap-2"><Newspaper size={18} /> Noticias</span>
                <ChevronDown size={18} className={`transition-transform ${noticiasMobileOpen ? 'rotate-180' : ''}`} />
              </button>
              <div 
                className={`mt-1 ml-2 overflow-hidden transition-all duration-200 ease-out ${noticiasMobileOpen ? 'max-h-40 opacity-100' : 'max-h-0 opacity-0 pointer-events-none'}`}
                aria-hidden={!noticiasMobileOpen}
              >
                <Link 
                  href="/noticias" 
                  className={`block p-2 rounded-md text-sm ${currentTheme === 'light' ? 'text-gray-700 hover:bg-gray-100' : 'text-gray-300 hover:bg-gray-800'}`} 
                  onClick={closeAllMenus}
                >
                  Ver noticias
                </Link>
                <Link 
                  href="/noticias?tipo=recientes" 
                  className={`block p-2 rounded-md text-sm ${currentTheme === 'light' ? 'text-gray-700 hover:bg-gray-100' : 'text-gray-300 hover:bg-gray-800'}`} 
                  onClick={closeAllMenus}
                >
                  Recientes
                </Link>
                <Link 
                  href="/noticias?tipo=destacadas" 
                  className={`block p-2 rounded-md text-sm ${currentTheme === 'light' ? 'text-gray-700 hover:bg-gray-100' : 'text-gray-300 hover:bg-gray-800'}`} 
                  onClick={closeAllMenus}
                >
                  Destacadas
                </Link>
              </div>
            </li>
            <li className="menu-item">
              <button
                type="button"
                className={`w-full flex items-center justify-between gap-2 p-2 rounded-md ${currentTheme === 'light' ? 'text-gray-700 hover:bg-gray-100' : 'text-gray-200 hover:bg-gray-800'}`}
                aria-expanded={foroMobileOpen}
                onClick={() => setForoMobileOpen(v => !v)}
              >
                <span className="flex items-center gap-2"><MessageSquare size={18} /> Foro</span>
                <ChevronDown size={18} className={`transition-transform ${foroMobileOpen ? 'rotate-180' : ''}`} />
              </button>
              <div 
                className={`mt-1 ml-2 overflow-hidden transition-all duration-200 ease-out ${foroMobileOpen ? 'max-h-[70vh] opacity-100' : 'max-h-0 opacity-0 pointer-events-none'}`} 
                aria-hidden={!foroMobileOpen}
              >
                {/* <Link href="/foro" className={`block p-2 rounded-md text-sm ${currentTheme === 'light' ? 'text-gray-700 hover:bg-gray-100' : 'text-gray-300 hover:bg-gray-800'}`} onClick={closeAllMenus}>
                  Ver todo el foro
                </Link> */}
                {foroCategorias.map(cat => {
                  const hasSubcats = cat.subcategorias && cat.subcategorias.length > 0;
                  const isExpanded = expandedCategories[cat.id] || false;
                  
                  return (
                    <div key={cat.id} className="mt-1">
                      <div className="flex items-center justify-between">
                        <Link
                          href={`/foro/categoria/${cat.slug}`}
                          className={`flex-grow px-4 py-2 rounded-md text-sm ${currentTheme === 'light' ? 'text-gray-700 hover:bg-gray-100' : 'text-gray-300 hover:bg-gray-800'}`}
                          onClick={closeAllMenus}
                          style={cat.color ? { borderLeft: `3px solid ${cat.color}` } : undefined}
                        >
                          {cat.nombre}
                        </Link>
                        {hasSubcats && (
                          <button
                            onClick={(e) => {
                              e.preventDefault();
                              e.stopPropagation();
                              setExpandedCategories(prev => ({
                                ...prev,
                                [cat.id]: !prev[cat.id]
                              }));
                            }}
                            className={`p-2 rounded-full ${currentTheme === 'light' ? 'hover:bg-gray-100' : 'hover:bg-gray-800'}`}
                          >
                            <ChevronDown 
                              className={`h-4 w-4 transition-transform duration-200 ${isExpanded ? 'rotate-180' : ''}`} 
                            />
                          </button>
                        )}
                      </div>
                      <div 
                        className={`ml-4 mt-1 space-y-1 overflow-hidden transition-all duration-200 ease-out ${isExpanded && hasSubcats ? 'max-h-40 opacity-100' : 'max-h-0 opacity-0 pointer-events-none'}`}
                        aria-hidden={!(isExpanded && hasSubcats)}
                      >
                        {cat.subcategorias?.map(subcat => (
                          <Link
                            key={subcat.id}
                            href={`/foro/categoria/${subcat.slug}`}
                            className={`block px-4 py-2 rounded-md text-xs ${currentTheme === 'light' ? 'text-gray-700 hover:bg-gray-100' : 'text-gray-300 hover:bg-gray-800'}`}
                            onClick={closeAllMenus}
                            style={subcat.color ? { borderLeft: `3px solid ${subcat.color}` } : undefined}
                          >
                            {subcat.nombre}
                          </Link>
                        ))}
                      </div>
                    </div>
                  );
                })}
              </div>
            </li>
          </ul>

          {isAdmin && (
            <div className={`p-4 border-t ${currentTheme === 'light' ? 'border-gray-200' : 'border-gray-800'}`}>
              <ul className="space-y-2">
                <li className="menu-item">
                  <Link href="/admin/dashboard" className={`flex items-center gap-2 p-2 rounded-md ${currentTheme === 'light' ? 'text-gray-700 hover:bg-gray-100' : 'text-gray-200 hover:bg-gray-800'}`} onClick={closeAllMenus}>
                    <Shield size={18} /> Dashboard
                  </Link>
                </li>
                <li className="menu-item">
                  <Link href="/admin/foro" className={`flex items-center gap-2 p-2 rounded-md ${currentTheme === 'light' ? 'text-gray-700 hover:bg-gray-100' : 'text-gray-200 hover:bg-gray-800'}`} onClick={closeAllMenus}>
                    <MessageSquare size={18} /> Admin Foro
                  </Link>
                </li>
                <li className="menu-item">
                  <Link href="/admin/noticias" className={`flex items-center gap-2 p-2 rounded-md ${currentTheme === 'light' ? 'text-gray-700 hover:bg-gray-100' : 'text-gray-200 hover:bg-gray-800'}`} onClick={closeAllMenus}>
                    <Newspaper size={18} /> Admin Noticias
                  </Link>
                </li>
                <li className="menu-item">
                  <Link href="/admin/usuarios" className={`flex items-center gap-2 p-2 rounded-md ${currentTheme === 'light' ? 'text-gray-700 hover:bg-gray-100' : 'text-gray-200 hover:bg-gray-800'}`} onClick={closeAllMenus}>
                    <User size={18} /> Admin Usuarios
                  </Link>
                </li>
                
              </ul>
            </div>
          )}

          {authUser && (
            <div className={`p-4 border-t ${currentTheme === 'light' ? 'border-gray-200' : 'border-gray-800'}`}>
              <Link href="/perfil" className={`flex items-center gap-2 p-2 rounded-md w-full text-left ${currentTheme === 'light' ? 'text-gray-700 hover:bg-gray-100' : 'text-gray-200 hover:bg-gray-800'}`} onClick={closeAllMenus}><User size={18} /> Mi Perfil</Link>
              <button onClick={handleLogout} className="flex items-center gap-2 p-2 rounded-md hover:bg-red-500/10 w-full text-left mt-2 text-red-500"><LogOut size={18} /> Cerrar Sesión</button>
            </div>
          )}
        </div>
      </div>

      {/* Auth Modal */}
      <AuthModal
        isOpen={isAuthModalOpen}
        onClose={() => setIsAuthModalOpen(false)}
        defaultMode={authModalMode}
        redirectTo={authRedirectTo}
      />
    </header>
  )
}