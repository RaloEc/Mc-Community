'use client';

import { useEffect, useState, useCallback } from 'react';
import Link from 'next/link';
import { CalendarIcon, ChevronLeft, ChevronRight } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Noticia } from '@/types';
import useEmblaCarousel from 'embla-carousel-react';
import { WheelGesturesPlugin } from 'embla-carousel-wheel-gestures';

interface NoticiasMiniaturasProps {
  limit?: number;
  featured?: boolean;
}

export default function NoticiasMiniatura({ 
  limit = 5,
  featured = false 
}: NoticiasMiniaturasProps) {
  const [noticias, setNoticias] = useState<Noticia[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    let isMounted = true;
    let timeoutId: NodeJS.Timeout;
    
    const fetchNoticias = async () => {
      try {
        setLoading(true);
        
        // Establecer un tiempo límite de 10 segundos para la carga
        const timeoutPromise = new Promise<Response>((_, reject) => {
          timeoutId = setTimeout(() => {
            reject(new Error('Tiempo de espera agotado al cargar las noticias'));
          }, 10000);
        });
        
        // Intentar obtener las noticias con un tiempo límite
        const response = await Promise.race([
          fetch('/api/noticias'),
          timeoutPromise
        ]) as Response;
        
        // Limpiar el timeout ya que la respuesta llegó
        clearTimeout(timeoutId);
        
        if (!response.ok) {
          throw new Error('No se pudieron cargar las noticias');
        }
        
        const data = await response.json();
        
        // Solo actualizar el estado si el componente sigue montado
        if (isMounted) {
          if (data.success && data.data) {
            setNoticias(data.data.slice(0, limit));
          } else {
            setNoticias([]);
          }
        }
      } catch (err) {
        console.error('Error en NoticiasMiniatura:', err);
        // Solo actualizar el estado si el componente sigue montado
        if (isMounted) {
          setError(err instanceof Error ? err.message : 'Error al cargar las noticias');
          setNoticias([]);
        }
      } finally {
        // Solo actualizar el estado si el componente sigue montado
        if (isMounted) {
          setLoading(false);
        }
      }
    };

    fetchNoticias();
    
    // Limpiar al desmontar
    return () => {
      isMounted = false;
      clearTimeout(timeoutId);
    };
  }, [limit]);

  // Estado de carga
  if (loading) {
    return (
      <div className={`mt-2 ${featured ? 'grid md:grid-cols-3 gap-6' : 'space-y-3'}`}>
        {Array.from({ length: featured ? 3 : limit }).map((_, i) => (
          <div key={i} className="rounded-lg bg-background/50 p-3 dark:bg-amoled-black/50 animate-pulse h-40">
            <div className="h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4 mb-2"></div>
            <div className="h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2 mb-3"></div>
            <div className="space-y-2">
              <div className="h-2 bg-gray-200 dark:bg-gray-700 rounded"></div>
              <div className="h-2 bg-gray-200 dark:bg-gray-700 rounded w-5/6"></div>
              <div className="h-2 bg-gray-200 dark:bg-gray-700 rounded w-4/6"></div>
            </div>
          </div>
        ))}
      </div>
    );
  }

  // Manejo de errores
  if (error) {
    return (
      <div className="mt-2">
        <div className="rounded-lg bg-red-500/10 p-3 dark:bg-red-900/10">
          <p className="text-sm text-red-500 dark:text-red-400">Error: {error}</p>
        </div>
      </div>
    );
  }

  // Sin noticias
  if (noticias.length === 0) {
    return (
      <div className="mt-2">
        <div className="rounded-lg bg-background/50 p-3 dark:bg-amoled-black/50">
          <p className="text-sm text-muted-foreground">No hay noticias disponibles</p>
        </div>
      </div>
    );
  }

  // Vista principal
  if (featured) {
    return (
      <div className="grid md:grid-cols-3 gap-6">
        {noticias.map((noticia) => (
          <Link
            key={noticia.id}
            href={`/noticias/${noticia.id}`}
            className="block group h-full"
          >
            <article className="h-full flex flex-col rounded-lg border border-border/50 overflow-hidden transition-all hover:shadow-md">
              {noticia.imagen_portada && (
                <div className="relative h-40">
                  <img
                    src={noticia.imagen_portada}
                    alt={noticia.titulo}
                    className="w-full h-full object-cover"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity" />
                </div>
              )}
              <div className="p-4 flex-1 flex flex-col">
                <div className="flex items-center text-xs text-muted-foreground mb-2">
                  <CalendarIcon className="h-3.5 w-3.5 mr-1" />
                  {noticia.fecha_publicacion && new Date(noticia.fecha_publicacion).toLocaleDateString('es-ES', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric',
                  })}
                </div>
                <h3 className="font-medium text-lg group-hover:text-primary transition-colors line-clamp-2 mb-2">
                  {noticia.titulo}
                </h3>
                <p className="mt-auto text-sm text-muted-foreground line-clamp-3">
                  {noticia.resumen || noticia.contenido?.replace(/<[^>]*>?/gm, '')}
                </p>
              </div>
            </article>
          </Link>
        ))}
      </div>
    );
  }

  // Vista en carrusel para móvil y fila horizontal para escritorio
  const noticiasAMostrar = noticias.slice(0, 5);
  
  // Configuración del carrusel
  const [emblaRef, emblaApi] = useEmblaCarousel(
    { 
      loop: true,
      dragFree: true,
      containScroll: 'trimSnaps',
      breakpoints: {
        '(min-width: 768px)': { active: false } // Desactivar en pantallas md y superiores
      }
    },
    [WheelGesturesPlugin()]
  );

  const scrollPrev = useCallback(() => {
    if (emblaApi) emblaApi.scrollPrev();
  }, [emblaApi]);

  const scrollNext = useCallback(() => {
    if (emblaApi) emblaApi.scrollNext();
  }, [emblaApi]);

  // Componente de tarjeta de noticia reutilizable
  const NoticiaCard = ({ noticia, className = '' }: { noticia: Noticia; className?: string }) => (
    <div className={`${className} h-full`}>
      <Link href={`/noticias/${noticia.id}`} className="block group h-full">
        <article className="h-full flex flex-col rounded-lg border border-border/50 overflow-hidden hover:shadow-md transition-shadow duration-300">
          {/* Imagen */}
          {noticia.imagen_portada ? (
            <div className="relative aspect-video bg-muted/50">
              <img
                src={noticia.imagen_portada}
                alt={noticia.titulo}
                className="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
              />
              <div className="absolute inset-0 bg-black/10 group-hover:bg-black/20 transition-colors duration-300" />
            </div>
          ) : (
            <div className="aspect-video bg-muted/50 flex items-center justify-center">
              <span className="text-muted-foreground">Sin imagen</span>
            </div>
          )}
          
          {/* Contenido */}
          <div className="p-4 flex-1 flex flex-col">
            <div className="flex items-center text-xs text-muted-foreground mb-2">
              <CalendarIcon className="mr-1.5 h-3.5 w-3.5 flex-shrink-0" />
              {noticia.fecha_publicacion && new Date(noticia.fecha_publicacion).toLocaleDateString('es-ES', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
              })}
            </div>
            <h3 className="font-medium text-base group-hover:text-primary transition-colors line-clamp-2 mb-2">
              {noticia.titulo}
            </h3>
            <p className="text-sm text-muted-foreground line-clamp-3">
              {noticia.resumen || noticia.contenido?.replace(/<[^>]*>?/gm, '')}
            </p>
          </div>
        </article>
      </Link>
    </div>
  );
  
  return (
    <div className="space-y-4">
      {/* Versión móvil - Carrusel */}
      <div className="md:hidden relative">
        <div className="overflow-hidden" ref={emblaRef}>
          <div className="flex">
            {noticiasAMostrar.map((noticia) => (
              <div key={noticia.id} className="flex-[0_0_85%] min-w-0 pl-4">
                <NoticiaCard noticia={noticia} />
              </div>
            ))}
          </div>
        </div>
        <button 
          onClick={scrollPrev}
          className="absolute left-0 top-1/2 -translate-y-1/2 z-10 w-8 h-8 flex items-center justify-center rounded-full bg-background/80 backdrop-blur-sm border border-border shadow-md -ml-2"
          aria-label="Anterior"
        >
          <ChevronLeft className="h-5 w-5" />
        </button>
        <button 
          onClick={scrollNext}
          className="absolute right-0 top-1/2 -translate-y-1/2 z-10 w-8 h-8 flex items-center justify-center rounded-full bg-background/80 backdrop-blur-sm border border-border shadow-md -mr-2"
          aria-label="Siguiente"
        >
          <ChevronRight className="h-5 w-5" />
        </button>
      </div>
      
      {/* Versión escritorio - Grid */}
      <div className="hidden md:grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
        {noticiasAMostrar.map((noticia) => (
          <NoticiaCard key={noticia.id} noticia={noticia} />
        ))}
      </div>

      {/* Botón para ver más noticias */}
      <div className="flex justify-end pt-2">
        <Button variant="ghost" asChild>
          <Link href="/noticias" className="text-sm">
            Ver todas las noticias
            <ChevronRight className="ml-1 h-4 w-4" />
          </Link>
        </Button>
      </div>
    </div>
  );
}
