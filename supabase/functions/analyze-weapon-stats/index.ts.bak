// Supabase Edge Function para analizar estadísticas de armas con Gemini AI

import { serve } from 'https://deno.land/std@0.192.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.38.4';
import { GoogleGenerativeAI } from 'https://esm.sh/@google/generative-ai@0.2.0';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'POST, OPTIONS',
};

// Inicializar el cliente de Google Gemini
const genAI = new GoogleGenerativeAI(Deno.env.get('GEMINI_API_KEY') || '');
const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

// Tipos de datos
type WeaponStats = {
  dano: number;
  alcance: number;
  control: number;
  manejo: number;
  estabilidad: number;
  precision: number;
  perforacionBlindaje: number;
  cadenciaDisparo: number;
  capacidad: number;
  velocidadBoca: number;
  sonidoDisparo: number;
  nombreArma?: string;
};

// Función para analizar la imagen con Gemini
async function analyzeWeaponImage(imageData: string, mimeType: string): Promise<WeaponStats> {
  try {
    console.log('Iniciando análisis de imagen con Gemini...');
    
    const prompt = `Analiza esta imagen de estadísticas de un arma de videojuego y extrae los siguientes valores numéricos. 
    Solo devuelve un objeto JSON con los siguientes campos (todos son números excepto nombreArma que es opcional):
    {
      "dano": number,
      "alcance": number,
      "control": number,
      "manejo": number,
      "estabilidad": number,
      "precision": number,
      "perforacionBlindaje": number,
      "cadenciaDisparo": number,
      "capacidad": number,
      "velocidadBoca": number,
      "sonidoDisparo": number,
      "nombreArma"?: string
    }
    
    Si un valor no está presente, usa 0.`;

    // Convertir base64 a un formato que Gemini pueda entender
    const imagePart = {
      inlineData: {
        data: imageData,
        mimeType: mimeType
      }
    };

    const result = await model.generateContent([prompt, imagePart]);
    const response = await result.response;
    const text = response.text();
    
    console.log('Respuesta de Gemini:', text);
    
    // Extraer el JSON de la respuesta
    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('No se pudo extraer JSON de la respuesta');
    }
    
    const stats = JSON.parse(jsonMatch[0]);
    console.log('Estadísticas extraídas:', stats);
    
    // Validar y normalizar los datos
    return {
      dano: Number(stats.dano) || 0,
      alcance: Number(stats.alcance) || 0,
      control: Number(stats.control) || 0,
      manejo: Number(stats.manejo) || 0,
      estabilidad: Number(stats.estabilidad) || 0,
      precision: Number(stats.precision) || 0,
      perforacionBlindaje: Number(stats.perforacionBlindaje) || 0,
      cadenciaDisparo: Number(stats.cadenciaDisparo) || 0,
      capacidad: Number(stats.capacidad) || 0,
      velocidadBoca: Number(stats.velocidadBoca) || 0,
      sonidoDisparo: Number(stats.sonidoDisparo) || 0,
      nombreArma: stats.nombreArma || ''
    };
  } catch (error) {
    console.error('Error en analyzeWeaponImage:', error);
    throw new Error(`Error al analizar la imagen: ${error.message}`);
  }
}

// Manejador principal de la función
export default async function handler(req: Request) {
  // Manejar solicitudes OPTIONS para CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders });
  }

  try {
    // Verificar que sea una solicitud POST
    if (req.method !== 'POST') {
      return new Response(
        JSON.stringify({ error: 'Método no permitido' }),
        { status: 405, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Parsear el cuerpo de la solicitud
    const requestData = await req.json();
    
    // Verificar que tenemos los datos de la imagen
    if (!requestData.imageData) {
      return new Response(
        JSON.stringify({ error: 'Se requiere imageData' }),
        { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
      );
    }

    // Obtener el tipo de contenido (contentType)
    const contentType = requestData.contentType || 'image/jpeg';
    
    // Analizar la imagen
    console.log('Procesando imagen...');
    const stats = await analyzeWeaponImage(requestData.imageData, contentType);
    
    // Devolver los resultados
    return new Response(
      JSON.stringify({ success: true, data: stats }),
      { status: 200, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
    
  } catch (error) {
    console.error('Error en la función de análisis:', error);
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: 'Error en el análisis de la imagen',
        details: error.message 
      }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
}

// Iniciar el servidor
serve(handler);
